
  1. 
a) Write a C program to display the file content in reverse order using lseek
     system call.
b) Write a C program to create a child process and show how parent and child  processes will share the text file and justify that both parent and child shares the same file offset.

1a
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>

int main(){
int fd = open("file.txt",O_RDONLY);
int size = lseek(fd,0,SEEK_END);
char ch;
while(size--){
lseek(fd,size,SEEK_SET);
read(fd,&ch,1);
putchar(ch);
}
close(fd);
return 0;
}

1b

#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include <sys/wait.h>
int main(){
int fd = open("file.txt",O_RDONLY);
int pid = fork();
char buffer[10];
if(pid == 0){
read(fd,buffer,10);
buffer[10]='\0';
printf("Child Process %s\n",buffer);
}
else{
wait(NULL);
read(fd,buffer,10);
buffer[10] = '\0';
printf("Parent read: %s\n", buffer);
}
close(fd);
return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
    2. 
    a) Write a C program to display various details of a file using stat structure (Atleast 5 fields).
    b) Write a C program that takes the file descriptor as an argument and prints the description of selected file flags for that descriptor.

2a
#include<stdio.h>
#include<sys/stat.h>

int main(){

struct stat ft;
stat("file.txt",&ft);
printf("size is %ld bytes \n :",ft.st_size);
printf("no of links %ld\n :",ft.st_nlink);
printf("access time %ld\n :",ft.st_atime);
printf("file inode %ld\n:",ft.st_ino);
printf("modified time %ld\n:",ft.st_mtime);
return 0;
}

2b#include <stdio.h>
#include <fcntl.h>

void printFlags(int fd) {
    int flags = fcntl(fd, F_GETFL);
    printf("File flags for descriptor %d:\n", fd);
    printf("O_APPEND: %s\n", (flags & O_APPEND) ? "Yes" : "No");/////
    printf("O_NONBLOCK: %s\n", (flags & O_NONBLOCK) ? "Yes" : "No");/////
    printf("O_SYNC: %s\n", (flags & O_SYNC) ? "Yes" : "No");////
    printf("O_DSYNC: %s\n", (flags & O_DSYNC) ? "Yes" : "No");
    printf("O_RSYNC: %s\n", (flags & O_RSYNC) ? "Yes" : "No");
    printf("O_CREAT: %s\n", (flags & O_CREAT) ? "Yes" : "No");////
    printf("O_TRUNC: %s\n", (flags & O_TRUNC) ? "Yes" : "No");////
    // Add more flags as needed
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <file descriptor>\n", argv[0]);
        return 1;
    }

    int fd = atoi(argv[1]);
    printFlags(fd);

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
    3. 
    a) Write a C program to simulate system function.
    b) Write a C program to implement ls â€“li command which list the files in a specified directory. Your program should Print 5 attributes of files.

3a

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    execl("/bin/sh","sh","-c","ls -l",(char *)0);
    return 0;
}

3b
#include <stdio.h>
#include <dirent.h>
#include <sys/stat.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;

    dir = opendir(".");
    while ((entry = readdir(dir)) != NULL) {
        printf("%ld %ld %ld %ld %o %s\n",
               fileStat.st_ino, fileStat.st_nlink, fileStat.st_uid,
               fileStat.st_gid, fileStat.st_mode, entry->d_name);
    }

    closedir(dir);
    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
    
//////////////////////////////////////////////////////////////////////////////////////  
    4. 
    a) Write a C program to demonstrate the creation of soft links and the various properties of hard links.
    b) Write a C program to
    i. To create a child process.
    ii. Child should execute an interpreter file by passing few arguments and some environment variables.
    iii. Parent should execute an interpreter file by passing few arguments
    iv. Create an interpreter file that has the path of echoall.c file
    v. Create echoall.c file which prints the arguments and environment variables received through parent and child process
4a
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<fcntl.h>
#include<sys/stat.h>

int main(){

link("file.txt","hard.txt");
symlink("file.txt","soft.txt");

struct stat fs1;
struct stat fs2;
struct stat fs;

stat("file.txt",&fs);
stat("soft.txt",&fs1);
lstat("hard.txt",&fs2);

printf("Original file size: %ld, inode: %ld\n", fs.st_size, (long)fs.st_ino);
printf("Hard link file size: %ld, inode: %ld\n", fs2.st_size, (long)fs2.st_ino);
printf("Symbolic link file size: %ld, inode: %ld\n", fs1.st_size, (long)fs1.st_ino);

return 0;
}
   
4b
echoall.c

#include <stdio.h>

int main(int argc, char *argv[], char *envp[]) {
    printf("Arguments:\n");
    for (int i = 0; i < argc; i++) {
        printf("argv[%d]: %s\n", i, argv[i]);
    }

    printf("\nEnvironment Variables:\n");
    for (int i = 0; envp[i] != NULL; i++) {
        printf("envp[%d]: %s\n", i, envp[i]);
    }

    return 0;
}




interpreter

#!/bin/sh
echo "Interpreter running"
./echoall $@



main.c


#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        // Child process
        char *args[] = {"interpreter", "arg1", "arg2", NULL};
        char *env[] = {"ENV1=value1", "ENV2=value2", NULL};
        execve("./interpreter", args, env);
    } else {
        // Parent process
        wait(NULL);
        char *args[] = {"./echoall", "parent_arg1", "parent_arg2", NULL};
        execvp(args[0], args);
    }

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////
5     a) Write a program to copy access and modification time of a file to another file using utime function.
    b) Write a C program using sigaction system call which calls a signal handler on SIGINT signal and then reset the default action of the SIGINT signal.

5a
#include<stdio.h>
#include<utime.h>
#include<sys/stat.h>
int main()
{
        struct stat fs;
        stat("f1.txt",&fs);
        printf("file1 information \n Access time %ld \n Modified time %ld \n",fs.st_atime,fs.st_mtime);
        struct utimbuf nt;
        nt.actime = fs.st_atime;
        nt.modtime = fs.st_mtime;
        utime("f2.txt",&nt);
        printf("Copied information \n Access time %ld \n Modified time %ld \n", nt.actime,nt.modtime);
        return 0;
}


5b

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include<unistd.h> //for sleep 
void handle_sigint(int sig) {
    printf("Caught SIGINT\n");
    signal(SIGINT, SIG_DFL);
}

int main() {
    struct sigaction sa;
    sa.sa_handler = handle_sigint;
    sigaction(SIGINT, &sa, NULL);

    while (1) {
        printf("Running...\n");
        sleep(1);
    }

    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
    6. 
    a) Write a C program to remove empty files from the given directory.
    b) Consider the last 100 bytes as a region. Write a C program to check whether the region is locked or not. If the region is locked, print pid of the process which has locked. If the region is not locked, lock the region with an exclusive lock, read the last 50 bytes and unlock the region.

6a

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<fcntl.h>
#include<dirent.h>
#include<sys/stat.h>

int main(){
DIR *dir;
struct dirent *entry;
struct stat fs;
dir = opendir(".");
while((entry=readdir(dir))!=NULL){
stat(entry->d_name,&fs);
if(fs.st_size==0){
printf("empty files are :%s",entry->d_name);
remove(entry->d_name);
}
}

return 0;
}

6b
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

int main() {
    int fd = open("file.txt", O_RDWR);
    struct stat fileStat;
    fstat(fd, &fileStat);

    struct flock lock;
    lock.l_type = F_WRLCK;
    lock.l_whence = SEEK_END;
    lock.l_start = -100;
    lock.l_len = 100;

    if (fcntl(fd, F_GETLK, &lock) == -1) {
        perror("fcntl");
        return 1;
    }

    if (lock.l_type == F_UNLCK) {
        lock.l_type = F_WRLCK;
        fcntl(fd, F_SETLK, &lock);

        lseek(fd, -50, SEEK_END);
        char buffer[50];
        read(fd, buffer, 50);
        write(STDOUT_FILENO, buffer, 50);

        lock.l_type = F_UNLCK;
        fcntl(fd, F_SETLK, &lock);
    } else {
        printf("Region is locked by PID: %d\n", lock.l_pid);
    }

    close(fd);
    return 0;
}
//////////////////////////////////////////////////////////////////////////////
7  a) Write a C program to illustrate the effect of setjmp and longjmp functions on register and volatile variables.
    b) C program to simulate copy command by accepting the filenames from command line. Report all errors.

7a
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<setjmp.h>

jmp_buf buf;
int main(){
volatile int x = 10;
register int y = 50;
printf("before jmp functions");
printf("x and y values %d %d\n ",x,y);
if(setjmp(buf)!=0){
printf("x and y values after jump functions : %d %d\n ",x,y);
return 0;
}
x=30;
y=40;
longjmp(buf,1);
}

7b
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[]) {

    int src = open(argv[1], O_RDONLY);
    int dest = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, 0644);

    char buffer[4096];
    ssize_t bytesRead;
    while ((bytesRead = read(src, buffer, sizeof(buffer))) > 0) {
        write(dest, buffer, bytesRead);
    }

    close(src);
    close(dest);
    return 0;
}

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
8a) Write a C program to remove empty files from the given directory.
b) Write a C program to perform the following operations
    i. To create a child process
    ii. The child process should execute a program to show the use of the access function
    iii. Parent process should wait for the child process to exit
    iv. Also print the necessary process IDs


 8a


#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<sys/stat.h>
#include<dirent.h>


int main(){
DIR *dir;
struct dirent *entry;
struct stat fs;

dir = opendir(".");
while((entry = readdir(dir))!=NULL){
stat(entry->d_name,&fs);
if(fs.st_size == 0){
printf("removing file : %s\n",entry->d_name);
remove(entry->d_name);
}
}
return 0;

}

8b


#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<sys/wait.h>

int main(){
int pid = fork();
if(pid<0){
printf("error");
}
else if(pid == 0){
printf("child process execution started ids are  (PID: %d, PPID: %d)\n",getpid(),getppid());
const char * fp = "file.txt";
if(access(fp,F_OK)==0){
printf("child process can access file1.txt");
}
if (access(fp, R_OK) == 0) {
 printf("Child Process: File %s is readable.\n", fp);}
}
else{
wait(NULL);
printf("Parent Process (PID: %d): Child process (PID: %d) exited.\n", getpid(), pid);
}
return 0;
}

/////////////////////////////////////////////////////////////////////////////
    9. 
    a) Write a C programs to demonstrate usage of umask and chmod functions.
    b) Write a C program
    i. To read first 20 characters from a file
    ii. seek to 10th byte from the beginning and display 20 characters from there
    iii. seek 10 bytes ahead from the current file offset and display 20 characters
    iv. Display the file size
9a
#include<stdio.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<unistd.h>

int main(){
mode_t old_mask = umask(0);
int fd = open("file1.txt",O_CREAT,0666);
close(fd);
chmod("file1.txt",0644);
struct stat fs;
stat("file1.txt",&fs);
printf("File permissions: %o\n", fs.st_mode & 0777);
umask(old_mask);
return 0;
}

9b 
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>

int main() {
    int fd = open("file.txt", O_RDONLY);
    char buffer[21];
    int size;

    // Read first 20 characters
    size = read(fd, buffer, 20);
    buffer[size] = '\0';
    printf("First 20 characters: %s\n", buffer);

    // Seek to 10th byte from the beginning and display 20 characters
    lseek(fd, 10, SEEK_SET);
    size = read(fd, buffer, 20);
    buffer[size] = '\0';
    printf("Seek to 10th byte from the beginning and display 20 characters: %s\n", buffer);

    // Seek 10 bytes ahead from the current file offset and display 20 characters
    lseek(fd, 10, SEEK_CUR);
    size = read(fd, buffer, 20);
    buffer[size] = '\0';
    printf("Characters after 10 bytes ahead: %s\n", buffer);

    // Display the file size
    struct stat fs;
    fstat(fd, &fs);  // Using fstat to get file info using file descriptor
    printf("File size is: %ld bytes\n", fs.st_size);

    close(fd);
    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////
    10. 
    a) Write a C program such that it initializes itself as a Daemon Process.
    b)  Demonstrate the working of wait and waitpid system calls with a program
  10 a  
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <sys/stat.h>  // Include this for umask

void init_daemon() {
    if (fork() > 0) exit(0);  // Exit parent
    setsid();
    chdir("/");
    umask(0);
    close(STDIN_FILENO);
    close(STDOUT_FILENO);
    close(STDERR_FILENO);
    open("/dev/null", O_RDONLY);
    open("/dev/null", O_RDWR);
    open("/dev/null", O_RDWR);
}

int main() {
    init_daemon();
    while (1) sleep(10);  // Daemon code
    return 0;
}

steps to run 10a....
gcc -o 10a 10a.c
 ./10a
ps aux | grep 10a

10b

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid1, pid2;
    pid1 = fork();
    if (pid1 == 0) {
        // First child process
        printf("First child PID: %d\n", getpid());
        sleep(2); // Simulate some work with sleep
        return 1; // Exit with status 1
    } else {
        // Parent process
        // Second fork to create the second child process
        pid2 = fork();
        if (pid2 == 0) {
            // Second child process
            printf("Second child PID: %d\n", getpid());
            sleep(4); // Simulate some work with sleep
            return 2; // Exit with status 2
        } else {
            // Parent process
            int status;
            pid_t waited_pid;
            // Use wait() to wait for any child to finish
            waited_pid = wait(&status);
            printf("Waited for any child. PID: %d, Exit Status: %d\n", waited_pid, WEXITSTATUS(status));
            // Use waitpid() to wait for the second child specifically
            waited_pid = waitpid(pid2, &status, 0);
            printf("Waited for second child. PID: %d, Exit Status: %d\n", waited_pid, WEXITSTATUS(status));

            return 0;
        }
    }
}
This paste expires in <1 day. Public IP access. Share whatever you see with others in seconds with Context. Terms of ServiceReport this
